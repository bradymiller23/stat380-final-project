---
title: "final project"
format: pdf
---

##### Loading the libraries

```{r, message=FALSE}
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(readxl)
library(ggplot2)
library(knitr)
library(car)
library(corrplot)
```

##### Reading in the data and doing general data wrangling


```{r, message = FALSE}
url1 <- "MTA_Daily_Ridership_Data__Beginning_2020.csv"
df <- read_csv(url1)

```


```{r}
url2 <- "weather_nyc_2021_2022.xlsx"
weather_df <- read_excel(url2)
```


```{r}
weather_df <-
  weather_df %>%
  select('datetime', 'tempmax', 'tempmin', 'temp', 'precip', 'snow', 
         'snowdepth', 'windspeed', 'conditions', 'icon')
```


```{r}
# subways data frame 
sub_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Subways: Total Estimated Ridership', 
         'Subways: % of Comparable Pre-Pandemic Day') %>%
  na.omit %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Subways: Total Estimated Ridership',
         'Subways: % of Comparable Pre-Pandemic Day')


# joining the weather and subway data frames
sub_df <-
  sub_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
    mutate(Date = as.Date(Date))

```


```{r}
# buses data frame
bus_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day') %>%
  na.omit() %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day')


# joining the weather and bus data frames
bus_df <-
  bus_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
  mutate(Date = as.Date(Date))

```

```{r}
#Creating temperature variable (cat.)
bus_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

day_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
bus_df$`Day of Week` <- factor(bus_df$`Day of Week`, levels = day_order)


sub_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

sub_df$`Day of Week` <- factor(sub_df$`Day of Week`, levels = day_order)
```

=======
### Creation of corrplots  


###### Correlation plots with full model
```{r}
#Corrplot with variables we think we want to use
df_subCorr <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, temp, precip, snowdepth, windspeed) %>%
  cor() 
# creating corrplot
corrplot(df_subCorr, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')


#Corrplot with all numeric variables
df_subCorr2 <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, tempmin, tempmax, temp, precip, snowdepth, snow, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_subCorr2, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')

```

###### Correlation plots with reduced amount of variables

```{r}
#Corrplot with variables we think we want to use
df_busCorr <- bus_df %>%
  select(`Buses: Total Estimated Ridership`, temp, precip, snowdepth, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_busCorr, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')


#Corrplot with all numeric variables
df_busCorr2 <- bus_df %>%
  select(`Buses: Total Estimated Ridership`, tempmin, tempmax, temp, precip, snowdepth, snow, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_busCorr2, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')
```






## Variance Inflation Factor (iteration 1)

###### Subways
```{r}
#VIF
library(car)

#Removing date (wrong type: character) and conditions (too correlated with icon and would rather use icon)
vif_sub_df <-  
  sub_df %>%
  select(-Date,
         -conditions)


full_model_sub2 <- lm(`Subways: Total Estimated Ridership` ~ ., data = vif_sub_df)


vif(full_model_sub2) %>% knitr::kable(caption = "Subways")
```


###### Buses

```{r}
vif_bus_df <-  
  bus_df %>%
  select(-Date,
         -conditions)

full_model_bus2 <- lm(`Buses: Total Estimated Ridership` ~ ., data = vif_bus_df)

vif(full_model_bus2) %>% knitr::kable(caption = "Buses")
```

We can see here that the differetn temp variables are heavily influenced by each other. They have vif values above 5 so there is multicollinearity. We will pick temp(cont) or temperature(cat). We will look at temp(cont) for now



# VARIABLE SELECTION

###### Subway
```{r}
# Removing temperature (split into breaks / categorical), conditions (similar to icon, icon is better), and date (character)
sub_df2 <-  
  sub_df %>%
  select(-conditions,
         -temperature,
         -Date)

#building full model without the variables temperature (categorical) and conditions
full_model_sub <- lm(`Subways: Total Estimated Ridership` ~ ., data = sub_df2)
summary(full_model_sub)

#perform backwards variable selection
backward_model_sub <- step(full_model_sub, direction = "backward", scope=formula(full_model_sub))
summary(backward_model_sub)
```


###### Bus

```{r}
#Doing the same thing with buses
bus_df2 <-  
  bus_df %>%
  select(-conditions,
         -temperature,
         -Date)

full_model_bus <- lm(`Buses: Total Estimated Ridership` ~ ., data = bus_df2)
summary(full_model_bus)

backward_model_bus <- step(full_model_bus, direction = "backward", scope=formula(full_model_bus))
summary(backward_model_bus)
```



## VIF (iteration 2)

Going through VIF again this time with less covariates as determined by the 
variable selection

###### Subways
```{r}
#Removinf date, conditions, and only leaving temp(cont.)
vif_sub_df2 <-  
  sub_df %>%
  select(-Date,
         -conditions,
         -tempmin,
         -tempmax,
         -temperature, 
         -icon,
         -snow, 
         -precip,
         -windspeed)

full_model_sub3 <- lm(`Subways: Total Estimated Ridership` ~ ., data = vif_sub_df2)
summary(full_model_sub3)
vif(full_model_sub3) %>% knitr::kable(caption = "Subways")
```



###### Buses
```{r}
vif_bus_df2 <-  
  bus_df %>%
  select(-Date,
         -conditions,
         -tempmin,
         -tempmax,
         -temperature,
         -icon,
         -snow)

full_model_bus3 <- lm(`Buses: Total Estimated Ridership` ~ ., data = vif_bus_df2)
summary(full_model_bus3)
vif(full_model_bus3) %>% knitr::kable(caption = "Buses")
```

We can see all values are below 5 for both subways and buses. This indicates there is no multicollinearity.



## Creation of datasets with desired covariates

```{r}
sub_new <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, `Day of Week`,`Subways: % of Comparable Pre-Pandemic Day`,temp, snowdepth)

bus_new <- bus_df %>%
  select(`Buses: Total Estimated Ridership`,`Day of Week`,`Buses: % of Comparable Pre-Pandemic Day`, temp, precip, windspeed, snowdepth)
```



#### Using K-Fold Cross Validation to split the data

```{R}
k <- 5 

# making folds for subways
make_folds_sub <- function(sub_new, k){
  folds <- sample(1:k, nrow(sub_new), replace = T)
  df_folds <- list()
  for (i in 1:k){
    df_folds[[i]] <- list()
    df_folds[[i]]$train = sub_new[which(folds != i), ]
    df_folds[[i]]$test = sub_new[which(folds == i), ]
  }
  return(df_folds)
}
make_folds_sub(sub_new, 5)

cv_mspe <- function(formula, df_folds){
  kfold_mspe <- c()
  for (i in 1:length(df_folds)){
    # change model to fit our project
    model <- lm(formula, df_folds[[i]]$train)
    # change model again
    y_hat <- predict(model, df_folds[[i]]$test)
    # change the response from 'medv' to our response
    kfold_mspe[i] <- sqrt(mean((y_hat - df_folds[[i]]$test$`Subways: Total Estimated Ridership`)^2))
  }
  return(mean(kfold_mspe))
}

cv_mspe(lm(`Subways: Total Estimated Ridership` ~ ., data = sub_new), df_folds)
```


```{R}
# a lot of the following code does not work due to us not having a model as of typing this


# making folds for buses
make_folds_bus <- function(bus_new, k){
  folds <- sample(1:k, nrow(bus_new), replace = T)
  df_folds <- list()
  for (i in 1:k){
    df_folds[[i]] <- list()
    df_folds[[i]]$train = bus_new[which(folds != i), ]
    df_folds[[i]]$test = bus_new[which(folds == i), ]
  }
  return(df_folds)
}


cv_mspe <- function(formula, df_folds){
  kfold_mspe <- c()
  for (i in 1:length(df_folds)){
    # change model to fit our project
    model <- lm(formula, df_folds[[i]]$train)
    # change model again
    y_hat <- predict(model, df_folds[[i]]$test)
    # change the response from 'medv' to our response
    kfold_mspe[i] <- sqrt(mean((y_hat - df_folds[[i]]$test$`Subways: Total Estimated Ridership`)^2))
  }
  return(mean(kfold_mspe))
}

rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}
```


```{R}
# calling the make_folds() function
df_folds <- make_folds(df, 5)

# you can specify the particular fold as well as the training/testing data
# just change the index from any number between 1 and k
df_folds[[1]]$test
```


```{R}
# replace medv with our response
cv_mspe(medv ~ ., df_folds)
```

```{r}
set.seed(42)
test_ind <- sample(
  1:nrow(sub_df), 
  floor( nrow(sub_df)/10 ),
  replace=FALSE
)

df_sub_train <- sub_df[-test_ind, ]
df_sub_test  <- sub_df[test_ind, ]


# creating linear regression model for sub ridership
lm_fit <- lm(`Subways: Total Estimated Ridership` ~  `Day of Week` +`Subways: % of Comparable Pre-Pandemic Day` + temp + snowdepth,  data = df_sub_train)


# making predictions based on the model
lm_predictions <- predict(lm_fit, newdata = df_sub_test)
lm_predictions


# calculating the RMSE of the predictions
rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}

lm_RMSE <- rmse(df_sub_test$`Subways: Total Estimated Ridership`, lm_predictions)
lm_RMSE



# creating SVM model for subway ridership
svm_fit <- svm(`Subways: Total Estimated Ridership` ~  `Day of Week` + `Subways: % of Comparable Pre-Pandemic Day` + temp + snowdepth, data = df_sub_train, kernel = 'radial')
svm_predictions <- predict(svm_fit, newdata = df_sub_test)
svm_predictions
svm_RMSE <- rmse(df_sub_test$`Subways: Total Estimated Ridership`, svm_predictions)
svm_RMSE
```

```{r}
set.seed(42)
test_ind <- sample(
  1:nrow(bus_df), 
  floor( nrow(bus_df)/10 ),
  replace=FALSE
)

df_bus_train <- bus_df[-test_ind, ]
df_bus_test  <- bus_df[test_ind, ]

# creating linear regression model for bus ridership
lm_fit <- lm(`Buses: Total Estimated Ridership` ~  `Day of Week`+`Buses: % of Comparable Pre-Pandemic Day` + temp + precip + windspeed + snowdepth, data = df_bus_train)


# making predictions based on the model
lm_predictions <- predict(lm_fit, newdata = df_bus_test)
lm_predictions


# calculating the RMSE of the predictions
rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}
lm_RMSE_bus <- rmse(df_bus_test$`Buses: Total Estimated Ridership`, lm_predictions)
lm_RMSE_bus


# creating SVM model for subway ridership
svm_fit <- svm(`Buses: Total Estimated Ridership` ~  `Day of Week`+`Buses: % of Comparable Pre-Pandemic Day` + temp + precip + windspeed + snowdepth, data = df_bus_train, kernel = 'radial')
svm_predictions <- predict(svm_fit, newdata = df_bus_test)
svm_predictions
svm_RMSE_bus <- rmse(df_bus_test$`Buses: Total Estimated Ridership`, svm_predictions)

```

```{r}
summary_table <- rbind(lm_RMSE, svm_RMSE, lm_RMSE_bus,  
                       svm_RMSE_bus)
summary_table
```




