---
title: "final project"
format: pdf
---

##### Loading the libraries

```{r, message=FALSE}
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(readxl) 
library(ggplot2)
library(knitr) 
library(car) 
library(corrplot)
library(caret)
library(e1071)
library(prophet)
```

##### Reading in the data and doing general data wrangling


```{r, message = FALSE}
url1 <- "MTA_Daily_Ridership_Data__Beginning_2020.csv"
df <- read_csv(url1)
```


```{r}
url2 <- "weather_nyc_2021_2022.xlsx"
weather_df <- read_excel(url2)
```


```{r}
weather_df <-
  weather_df %>%
  select('datetime', 'tempmax', 'tempmin', 'temp', 'precip', 'snow', 
         'snowdepth', 'windspeed', 'conditions', 'icon')
```


```{r}
# subways data frame 
sub_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Subways: Total Estimated Ridership', 
         'Subways: % of Comparable Pre-Pandemic Day') %>%
  na.omit %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Subways: Total Estimated Ridership',
         'Subways: % of Comparable Pre-Pandemic Day')


# joining the weather and subway data frames
sub_df <-
  sub_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
    mutate(Date = as.Date(Date))

```


```{r}
# buses data frame
bus_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day') %>%
  na.omit() %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day')


# joining the weather and bus data frames
bus_df <-
  bus_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
  mutate(Date = as.Date(Date))


```

```{r}
#Creating temperature variable (cat.)
bus_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

day_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
bus_df$`Day of Week` <- factor(bus_df$`Day of Week`, levels = day_order)


sub_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

sub_df$`Day of Week` <- factor(sub_df$`Day of Week`, levels = day_order)
```

=======
### Creation of corrplots  


###### Correlation plots with full model
```{r}
#Corrplot with variables we think we want to use
df_subCorr <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, temp, precip, snowdepth, windspeed) %>%
  cor() 
# creating corrplot
corrplot(df_subCorr, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')


#Corrplot with all numeric variables
df_subCorr2 <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, tempmin, tempmax, temp, precip, snowdepth, snow, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_subCorr2, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')

```

###### Correlation plots with reduced amount of variables

```{r}
#Corrplot with variables we think we want to use
df_busCorr <- bus_df %>%
  select(`Buses: Total Estimated Ridership`, temp, precip, snowdepth, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_busCorr, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')


#Corrplot with all numeric variables
df_busCorr2 <- bus_df %>%
  select(`Buses: Total Estimated Ridership`, tempmin, tempmax, temp, precip, snowdepth, snow, windspeed) %>%
  cor()
# creating corrplot
corrplot(df_busCorr2, method = 'color', tl.cex = 0.9, tl.col = 'black',
order = 'hclust', type = 'upper')
```






## Variance Inflation Factor (iteration 1)

###### Subways
```{r}
#VIF
library(car)

#Removing date (wrong type: character) and conditions (too correlated with icon and would rather use icon)
vif_sub_df <-  
  sub_df %>%
  select(-Date,
         -conditions)


full_model_sub2 <- lm(`Subways: Total Estimated Ridership` ~ ., data = vif_sub_df)


vif(full_model_sub2) %>% knitr::kable(caption = "Subways")
```


###### Buses

```{r}
vif_bus_df <-  
  bus_df %>%
  select(-Date,
         -conditions)

full_model_bus2 <- lm(`Buses: Total Estimated Ridership` ~ ., data = vif_bus_df)

vif(full_model_bus2) %>% knitr::kable(caption = "Buses")
```

We can see here that the differetn temp variables are heavily influenced by each other. They have vif values above 5 so there is multicollinearity. We will pick temp(cont) or temperature(cat). We will look at temp(cont) for now



# VARIABLE SELECTION

###### Subway
```{r}
# Removing temperature (split into breaks / categorical), conditions (similar to icon, icon is better), and date (character)
sub_df2 <-  
  sub_df %>%
  select(-conditions,
         -temperature,
         -Date)

#building full model without the variables temperature (categorical) and conditions
full_model_sub <- lm(`Subways: Total Estimated Ridership` ~ ., data = sub_df2)
summary(full_model_sub)

#perform backwards variable selection
backward_model_sub <- step(full_model_sub, direction = "backward", scope=formula(full_model_sub))
summary(backward_model_sub)
```


###### Bus

```{r}
#Doing the same thing with buses
bus_df2 <-  
  bus_df %>%
  select(-conditions,
         -temperature,
         -Date)

full_model_bus <- lm(`Buses: Total Estimated Ridership` ~ ., data = bus_df2)
summary(full_model_bus)

backward_model_bus <- step(full_model_bus, direction = "backward", scope=formula(full_model_bus))
summary(backward_model_bus)
```



## VIF (iteration 2)

Going through VIF again this time with less covariates as determined by the 
variable selection

###### Subways
```{r}
#Removinf date, conditions, and only leaving temp(cont.)
vif_sub_df2 <-  
  sub_df %>%
  select(-Date,
         -conditions,
         -tempmin,
         -tempmax,
         -temperature, 
         -icon,
         -snow, 
         -precip,
         -windspeed)

full_model_sub3 <- lm(`Subways: Total Estimated Ridership` ~ ., data = vif_sub_df2)
summary(full_model_sub3)
vif(full_model_sub3) %>% knitr::kable(caption = "Subways")
```



###### Buses
```{r}
vif_bus_df2 <-  
  bus_df %>%
  select(-Date,
         -conditions,
         -tempmin,
         -tempmax,
         -temperature,
         -icon,
         -snow)

full_model_bus3 <- lm(`Buses: Total Estimated Ridership` ~ ., data = vif_bus_df2)
summary(full_model_bus3)
vif(full_model_bus3) %>% knitr::kable(caption = "Buses")
```

We can see all values are below 5 for both subways and buses. This indicates there is no multicollinearity.



## Creation of datasets with desired covariates

```{r}
sub_new <- sub_df %>%
  select(`Subways: Total Estimated Ridership`, `Day of Week`,`Subways: % of Comparable Pre-Pandemic Day`,temp, snowdepth)
lm_sub <- lm(`Subways: Total Estimated Ridership` ~ ., data = sub_new)

bus_new <- bus_df %>%
  select(`Buses: Total Estimated Ridership`,`Day of Week`,`Buses: % of Comparable Pre-Pandemic Day`, temp, precip, snowdepth)
lm_bus <- lm(`Buses: Total Estimated Ridership` ~ ., data = bus_new)
```



#### Using K-Fold Cross Validation to split the data

```{R}
k <- 5 

# making folds for subways
make_folds_sub <- function(sub_new, k){
  folds <- sample(1:k, nrow(sub_new), replace = T)
  df_folds <- list()
  for (i in 1:k){
    df_folds[[i]] <- list()
    df_folds[[i]]$train <- sub_new[which(folds != i), ]
    df_folds[[i]]$test <- sub_new[which(folds == i), ]
  }
  return(df_folds)
}


cv_mspe <- function(formula, df_folds){
  kfold_mspe <- c()
  for (i in 1:length(df_folds)){
    # change model to fit our project
    model <- lm(formula, df_folds[[i]]$train)
    # change model again
    y_hat <- predict(model, df_folds[[i]]$test)
    # change the response from 'medv' to our response
    kfold_mspe[i] <- sqrt(mean((y_hat - df_folds[[i]]$test$`Subways: Total Estimated Ridership`)^2))
  }
  return(mean(kfold_mspe))
}

cv_mspe(`Subways: Total Estimated Ridership` ~ ., make_folds_sub(sub_new, k))
```


```{R}
# a lot of the following code does not work due to us not having a model as of typing this


# making folds for buses
make_folds_bus <- function(bus_new, k){
  folds <- sample(1:k, nrow(bus_new), replace = T)
  df_folds <- list()
  for (i in 1:k){
    df_folds[[i]] <- list()
    df_folds[[i]]$train = bus_new[which(folds != i), ]
    df_folds[[i]]$test = bus_new[which(folds == i), ]
  }
  return(df_folds)
}


cv_mspe <- function(formula, df_folds){
  kfold_mspe <- c()
  for (i in 1:length(df_folds)){
    # change model to fit our project
    model <- lm(formula, df_folds[[i]]$train)
    # change model again
    y_hat <- predict(model, df_folds[[i]]$test)
    # change the response from 'medv' to our response
    kfold_mspe[i] <- sqrt(mean((y_hat - df_folds[[i]]$test$`Subways: Total Estimated Ridership`)^2))
  }
  return(mean(kfold_mspe))
}

rmse <- function(y, yhat) {
  sqrt(mean((y - yhat)^2))
}
```


```R
# calling the make_folds() function
df_folds <- make_folds(df, 5)

# you can specify the particular fold as well as the training/testing data
# just change the index from any number between 1 and k
df_folds[[1]]$test
```



#### Time Series K-fold

```{r}
# Set the number of folds for cross-validation

folds <- make_folds_sub(sub_new, k = 10)

temp_list <- list(folds[[1]]$train, folds[[2]]$train, folds[[3]]$train, folds[[4]]$train, folds[[5]]$train)
train_data <- Reduce(function(x, y) merge(x, y, all = TRUE), temp_list)



ctrl <- trainControl(method = "cv", number = 10)

# Define the model to use
model <- train(`Subways: Total Estimated Ridership` ~., data = train_data, method = "svmRadial", trControl = ctrl)

# Print the cross-validation results
print(model$results)
```

###### Full Bus SVM
```{r}

train1 <- bus_df[1:233, ]
test1 <- bus_df[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "svmRadial")
m1RMSE <- model1$results$RMSE

train2 <- bus_df[1:320, ]
test2 <- bus_df[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "svmRadial")
m2RMSE <- model2$results$RMSE


train3 <- bus_df[1:408, ]
test3 <- bus_df[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "svmRadial")
m3RMSE <- model3$results$RMSE


train4 <- bus_df[1:496, ]
test4 <- bus_df[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "svmRadial")
m4RMSE <- model4$results$RMSE


train5 <- bus_df[1:584, ]
test5 <- bus_df[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "svmRadial")
m5RMSE <- model5$results$RMSE

fullBusSVM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Sub SVM
```{r}
train1 <- sub_df[1:233, ]
test1 <- sub_df[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "svmRadial")
m1RMSE <- model1$results$RMSE

train2 <- sub_df[1:320, ]
test2 <- sub_df[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "svmRadial")
m2RMSE <- model2$results$RMSE


train3 <- sub_df[1:408, ]
test3 <- sub_df[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "svmRadial")
m3RMSE <- model3$results$RMSE


train4 <- sub_df[1:496, ]
test4 <- sub_df[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "svmRadial")
m4RMSE <- model4$results$RMSE


train5 <- sub_df[1:584, ]
test5 <- sub_df[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "svmRadial")
m5RMSE <- model5$results$RMSE

fullSubSVM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Bus LM
```{r}
train1 <- bus_df[1:233, ]
test1 <- bus_df[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- bus_df[1:320, ]
test2 <- bus_df[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- bus_df[1:408, ]
test3 <- bus_df[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- bus_df[1:496, ]
test4 <- bus_df[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- bus_df[1:584, ]
test5 <- bus_df[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

fullBusLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Sub LM
```{r}
train1 <- sub_df[1:233, ]
test1 <- sub_df[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- sub_df[1:320, ]
test2 <- sub_df[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- sub_df[1:408, ]
test3 <- sub_df[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- sub_df[1:496, ]
test4 <- sub_df[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- sub_df[1:584, ]
test5 <- sub_df[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

fullSubLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Bus rpart
```r
train1 <- bus_df[1:233, ]
test1 <- bus_df[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "rpart")
m1RMSE <- model1$results$RMSE

train2 <- bus_df[1:320, ]
test2 <- bus_df[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "rpart")
m2RMSE <- model2$results$RMSE


train3 <- bus_df[1:408, ]
test3 <- bus_df[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "rpart")
m3RMSE <- model3$results$RMSE


train4 <- bus_df[1:496, ]
test4 <- bus_df[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "rpart")
m4RMSE <- model3$results$RMSE


train5 <- bus_df[1:584, ]
test5 <- bus_df[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "rpart")
m5RMSE <- model5$results$RMSE

fullBusrpart_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Sub rpart
```r
train1 <- sub_df[1:233, ]
test1 <- sub_df[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "rpart")
m1RMSE <- model1$results$RMSE

train2 <- sub_df[1:320, ]
test2 <- sub_df[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "rpart")
m2RMSE <- model2$results$RMSE


train3 <- sub_df[1:408, ]
test3 <- sub_df[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "rpart")
m3RMSE <- model3$results$RMSE


train4 <- sub_df[1:496, ]
test4 <- sub_df[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "rpart")
m4RMSE <- model3$results$RMSE


train5 <- sub_df[1:584, ]
test5 <- sub_df[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "rpart")
m5RMSE <- model5$results$RMSE

fullSubrpart_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```



###### Full Bus nnet
```{r}
train1 <- bus_df[1:233, ]
test1 <- bus_df[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "nnet")
m1RMSE <- model1$results$RMSE

train2 <- bus_df[1:320, ]
test2 <- bus_df[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "nnet")
m2RMSE <- model2$results$RMSE


train3 <- bus_df[1:408, ]
test3 <- bus_df[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "nnet")
m3RMSE <- model3$results$RMSE


train4 <- bus_df[1:496, ]
test4 <- bus_df[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "nnet")
m4RMSE <- model4$results$RMSE


train5 <- bus_df[1:584, ]
test5 <- bus_df[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "nnet")
m5RMSE <- model5$results$RMSE

fullBusNNet_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Full Sub nnet
```{r}
train1 <- sub_df[1:233, ]
test1 <- sub_df[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "nnet")
m1RMSE <- model1$results$RMSE

train2 <- sub_df[1:320, ]
test2 <- sub_df[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "nnet")
m2RMSE <- model2$results$RMSE


train3 <- sub_df[1:408, ]
test3 <- sub_df[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "nnet")
m3RMSE <- model3$results$RMSE


train4 <- sub_df[1:496, ]
test4 <- sub_df[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "nnet")
m4RMSE <- model4$results$RMSE


train5 <- sub_df[1:584, ]
test5 <- sub_df[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "nnet")
m5RMSE <- model5$results$RMSE

fullSubNNet_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```




###### Bus new SVM

```{r}
train1 <- bus_new[1:233, ]
test1 <- bus_new[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "svmRadial")
m1RMSE <- model1$results$RMSE

train2 <- bus_new[1:320, ]
test2 <- bus_new[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "svmRadial")
m2RMSE <- model2$results$RMSE


train3 <- bus_new[1:408, ]
test3 <- bus_new[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "svmRadial")
m3RMSE <- model3$results$RMSE


train4 <- bus_new[1:496, ]
test4 <- bus_new[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "svmRadial")
m4RMSE <- model4$results$RMSE


#predictions <- predict(model4, test4)
#pred <- data.frame(
 ##truth = c(test4)
#)
#pred


train5 <- bus_new[1:584, ]
test5 <- bus_new[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "svmRadial")
m5RMSE <- model5$results$RMSE

newBusSVM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Sub new SVM

```{r}
train1 <- sub_new[1:233, ]
test1 <- sub_new[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "svmRadial")
m1RMSE <- model1$results$RMSE

train2 <- sub_new[1:320, ]
test2 <- sub_new[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "svmRadial")
m2RMSE <- model2$results$RMSE


train3 <- sub_new[1:408, ]
test3 <- sub_new[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "svmRadial")
m3RMSE <- model3$results$RMSE


train4 <- sub_new[1:496, ]
test4 <- sub_new[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "svmRadial")
m4RMSE <- model4$results$RMSE


train5 <- sub_new[1:584, ]
test5 <- sub_new[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "svmRadial")
m5RMSE <- model5$results$RMSE

newSubSVM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```



###### Bus new LM
```{r}
train1 <- bus_new[1:233, ]
test1 <- bus_new[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- bus_new[1:320, ]
test2 <- bus_new[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- bus_new[1:408, ]
test3 <- bus_new[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- bus_new[1:496, ]
test4 <- bus_new[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- bus_new[1:584, ]
test5 <- bus_new[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

newBusLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Sub new LM
```{r}
train1 <- sub_new[1:233, ]
test1 <- sub_new[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- sub_new[1:320, ]
test2 <- sub_new[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- sub_new[1:408, ]
test3 <- sub_new[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- sub_new[1:496, ]
test4 <- sub_new[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- sub_new[1:584, ]
test5 <- sub_new[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

newSubLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```




###### Bus new nnet
```{r}
train1 <- bus_new[1:233, ]
test1 <- bus_new[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "nnet")
m1RMSE <- model1$results$RMSE

train2 <- bus_new[1:320, ]
test2 <- bus_new[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "nnet")
m2RMSE <- model2$results$RMSE


train3 <- bus_new[1:408, ]
test3 <- bus_new[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "nnet")
m3RMSE <- model3$results$RMSE


train4 <- bus_new[1:496, ]
test4 <- bus_new[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "nnet")
m4RMSE <- model4$results$RMSE


train5 <- bus_new[1:584, ]
test5 <- bus_new[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "nnet")
m5RMSE <- model5$results$RMSE

newBusNNet_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```

###### Sub new nnet
```{r}
train1 <- sub_new[1:233, ]
test1 <- sub_new[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "nnet")
m1RMSE <- model1$results$RMSE

train2 <- sub_new[1:320, ]
test2 <- sub_new[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "nnet")
m2RMSE <- model2$results$RMSE


train3 <- sub_new[1:408, ]
test3 <- sub_new[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "nnet")
m3RMSE <- model3$results$RMSE


train4 <- sub_new[1:496, ]
test4 <- sub_new[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "nnet")
m4RMSE <- model4$results$RMSE


train5 <- sub_new[1:584, ]
test5 <- sub_new[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "nnet")
m5RMSE <- model5$results$RMSE

newSubNNet_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15
```


### RMSE Table
```{r}
df_RMSE <-
  data.frame(
    Model = c('Bus SVM',
              'Sub SVM',
              'Bus LM',
              'Sub LM',
              'New Bus NNet',
              'New Sub NNet'),
    RMSE = c(newBusSVM_RMSE, 
             newSubSVM_RMSE,
             newBusLM_RMSE,
             newSubLM_RMSE,
             newBusNNet_RMSE,
             newSubNNet_RMSE
             )
  )
df_RMSE
```


##### Plotting/predictions
```{r}
train1 <- bus_new[1:233, ]
test1 <- bus_new[234:292, ]
model1 <- train(`Buses: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- bus_new[1:320, ]
test2 <- bus_new[320:401, ]
model2 <- train(`Buses: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- bus_new[1:408, ]
test3 <- bus_new[409:511, ]
model3 <- train(`Buses: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- bus_new[1:496, ]
test4 <- bus_new[497:620, ]
model4 <- train(`Buses: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- bus_new[1:584, ]
test5 <- bus_new[585:730, ]
model5 <- train(`Buses: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

newBusLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15



predictions <- predict(model4, test4)
pred <- data.frame(
 pred = c(predictions), 
 Date = test4$Date
)
 
plotsdf <- test4 %>%
  full_join(pred, by = 'Date')
plotsdf

plotsdf %>%
  ggplot(aes(x = Date)) +
  geom_line(aes(y = pred, fill = 'blue')) + 
  geom_line(aes(y = `Buses: Total Estimated Ridership`, fill = 'red')) + 
  ylab('Bus Ridership') + 
  ggtitle('Predictions of Bus Ridership vs Actual Ridership') 
  
```


```{r}
train1 <- sub_new[1:233, ]
test1 <- sub_new[234:292, ]
model1 <- train(`Subways: Total Estimated Ridership` ~ ., data = train1, method = "lm")
m1RMSE <- model1$results$RMSE

train2 <- sub_new[1:320, ]
test2 <- sub_new[320:401, ]
model2 <- train(`Subways: Total Estimated Ridership` ~ ., data = train2, method = "lm")
m2RMSE <- model2$results$RMSE


train3 <- sub_new[1:408, ]
test3 <- sub_new[409:511, ]
model3 <- train(`Subways: Total Estimated Ridership` ~ ., data = train3, method = "lm")
m3RMSE <- model3$results$RMSE


train4 <- sub_new[1:496, ]
test4 <- sub_new[497:620, ]
model4 <- train(`Subways: Total Estimated Ridership` ~ ., data = train4, method = "lm")
m4RMSE <- model4$results$RMSE


train5 <- sub_new[1:584, ]
test5 <- sub_new[585:730, ]
model5 <- train(`Subways: Total Estimated Ridership` ~ ., data = train5, method = "lm")
m5RMSE <- model5$results$RMSE

newSubLM_RMSE <- (sum(m1RMSE)+sum(m2RMSE)+sum(m3RMSE)+sum(m4RMSE)+sum(m5RMSE))/15



predictions <- predict(model4, test4)
pred <- data.frame(
 pred = c(predictions), 
 Date = test4$Date
)
 
plotsdf <- test4 %>%
  full_join(pred, by = 'Date')
plotsdf

plotsdf %>%
  ggplot(aes(x = Date)) +
  geom_line(aes(y = pred), color = 'blue' ) + 
  geom_line(aes(y = `Subways: Total Estimated Ridership`), color = 'red') + 
  ylab('Subway Ridership') + 
  ggtitle('Predictions of Subway Ridership vs Actual Ridership') 
  
```













```{r}
k <- 10

data <- sub_df %>% select(-conditions,
                          -Date,
                          -icon,
                          -temperature)

split_indices <- seq(1, nrow(data), by = floor(nrow(data) / k))

# Perform cross-validation
for (i in 2:length(split_indices)) {
  # Split the data into training and testing sets
  train_indices <- seq(split_indices[i - 1], split_indices[i] - 1)
  test_indices <- split_indices[i]:min(split_indices[i] + floor(nrow(data) / k) - 1, nrow(data))
  train_data <- data[train_indices, ]
  test_data <- data[test_indices, ]
  
  # Train the model on the training data
  model <- train(`Subways: Total Estimated Ridership` ~ ., data = train_data, method = "lm")
  
  # Make predictions on the testing data
  predictions <- predict(model, newdata = test_data)
  
  # Compute the accuracy metric(s) for this fold
  accuracy <- sqrt(mean((test_data$`Subways: Total Estimated Ridership` - predictions) ^ 2))
  
  # Print the accuracy metric(s) for this fold
  print(accuracy)
}
```


## Including Holidays
```{r}
holiday_df <- data.frame(
  holiday = c("New Year's Day", "Independence Day", "Thanksgiving", "Christmas"),
  ds = as.Date(c("2021-01-01", "2021-07-04", "2021-11-25", "2021-12-25")),
  lower_window = 0,
  upper_window = 1
)

sub_new <- sub_df %>%
  select (`Subways: Total Estimated Ridership`, `Day of Week`,`Subways: % of Comparable Pre-Pandemic Day`,temp, snowdepth, Date)

bus_new <- bus_df %>%
  select(`Buses: Total Estimated Ridership`,`Day of Week`,`Buses: % of Comparable Pre-Pandemic Day`, temp, windspeed, snowdepth, Date)


holiday_df %>% head

#Merging the dataset
sub_df <- sub_new %>% mutate(isholiday = ifelse(Date %in% holiday_df$ds, 1, 0))
bus_df <- bus_new %>% mutate(isholiday = ifelse(Date %in% holiday_df$ds, 1, 0))
```

Creating the train/test datasets

```{r}
# Split the data into training and testing sets
train_sub_df <- sub_df %>% filter(Date < as.Date("2022-01-01"))
test_sub_df <- sub_df %>% filter(Date >= as.Date("2022-01-01"))

train_bus_df <- bus_df %>% filter(Date < as.Date("2022-01-01"))
test_bus_df <- bus_df %>% filter(Date >= as.Date("2022-01-01"))
```

Preparing the model to use the `prophet` function

```{r}
# Create a function to prepare the data for the Prophet model
prepare_data_for_prophet <- function(df, y_column) {
  df <- df %>%
    select(Date, y = !!y_column) %>%
    rename(ds = Date)
  return(df)
}

# Prepare the data for the Prophet model
train_sub_prophet <- prepare_data_for_prophet(train_sub_df, 'Subways: Total Estimated Ridership')
test_sub_prophet <- prepare_data_for_prophet(test_sub_df, 'Subways: Total Estimated Ridership')
  
train_bus_prophet <- prepare_data_for_prophet(train_bus_df, 'Buses: Total Estimated Ridership')
test_bus_prophet <- prepare_data_for_prophet(test_bus_df, 'Buses: Total Estimated Ridership')
```

Using the prophet model to forecast ridership

```{r}
sub_prophet_model <- prophet(df = train_sub_prophet, holidays = holiday_df, yearly.seasonality = TRUE)
sub_forecast <- predict(sub_prophet_model, test_sub_prophet)

bus_prophet_model <- prophet(df = train_bus_prophet, holidays = holiday_df, yearly.seasonality = TRUE)
bus_forecast <- predict(bus_prophet_model, test_bus_prophet)
```

Combining actual and forecasted values for comparison

```{r}
sub_comparison <- test_sub_prophet %>%
  left_join(sub_forecast %>% select(ds, yhat), by = c("ds")) %>%
  rename(actual = y, forecast = yhat)

bus_comparison <- test_bus_prophet %>%
  left_join(bus_forecast %>% select(ds, yhat), by = c("ds")) %>%
  rename(actual = y, forecast = yhat)
```

Calculating MAE, MSE and RMSE

```{r}
calculate_metrics <- function(actual, forecast){
  mae <- mean(abs(actual - forecast))
  mse <- mean((actual - forecast)^2)
  rmse <- sqrt(mse)
  
  return(list(MAE = mae, MSE = mse, RMSE = rmse))
}

sub_metrics <- calculate_metrics(sub_comparison$actual, sub_comparison$forecast)
sub_metrics
```

```{r}
bus_metrics <- calculate_metrics(bus_comparison$actual, bus_comparison$forecast)
bus_metrics
```

### Inferences from ML

Plotting actual vs forecasted values

```{r}
ggplot(sub_comparison, aes(x = ds)) +
  geom_line(aes(y = actual, color = "Actual")) +
  geom_line(aes(y = forecast, color = "Forecast")) +
  labs(title = "Subway Ridership: Actual vs Forecast",
       x = "Date",
       y = "Ridership",
       color = "Legend") +
  theme_minimal()
```

```{r}
ggplot(bus_comparison, aes(x = ds)) +
  geom_line(aes(y = actual, color = "Actual")) +
  geom_line(aes(y = forecast, color = "Forecast")) +
  labs(title = "Bus Ridership: Actual vs Forecast",
       x = "Date",
       y = "Ridership",
       color = "Legend") +
  theme_minimal()
```

Visualizing Residuals

```{r}
sub_comparison <- sub_comparison %>% mutate(residuals = actual - forecast)
bus_comparison <- bus_comparison %>% mutate(residuals = actual - forecast)

ggplot(sub_comparison, aes(x = ds, y = residuals)) +
  geom_point(color = "steelblue") +
  geom_smooth(se = FALSE, color = "red", linetype = "dashed") +
  labs(title = "Subway Ridership Residuals",
       x = "Date",
       y = "Residuals") +
  theme_minimal()
```

```{r}
ggplot(bus_comparison, aes(x = ds, y = residuals)) +
  geom_point(color = "steelblue") +
  geom_smooth(se = FALSE, color = "red", linetype = "dashed") +
  labs(title = "Bus Ridership Residuals",
       x = "Date",
       y = "Residuals") +
  theme_minimal()
```