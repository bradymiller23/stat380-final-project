---
title: "Final Project Preliminary Presentation"
format: pdf
---


##### Loading libraries and reading in data for subways and buses

```{r, message=FALSE}
library(dplyr)
library(tidyr)
library(readr)
library(lubridate)
library(readxl)
library(ggplot2)
library(knitr)
```


```{r, message = FALSE}
url1 <- "MTA_Daily_Ridership_Data__Beginning_2020.csv"
df <- read_csv(url1)

colnames(df) %>% kable()
```


##### Creating variable specific data frames

```{r}
# subways data frame 
sub_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Subways: Total Estimated Ridership', 
         'Subways: % of Comparable Pre-Pandemic Day') %>%
  na.omit %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Subways: Total Estimated Ridership',
         'Subways: % of Comparable Pre-Pandemic Day')
colnames(sub_df) %>% kable()
```

```{r}
# buses data frame
bus_df <-
  df %>%
  # selecting relevant variables
  select('Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day') %>%
  na.omit() %>%
  # filtering out any dates in the years 2020 and 2023
  filter(!grepl("2023$", Date),
         !grepl("2020$", Date)) %>%
  # mutating date to convert is from a "char" data type
  # creating a new variable that assigns each date their proper day of the week
  mutate("Date" = mdy(Date),
         "Day of Week" = weekdays(Date)) %>%
  select('Day of Week', 'Date', 'Buses: Total Estimated Ridership', 
         'Buses: % of Comparable Pre-Pandemic Day')
colnames(bus_df) %>% kable()

```


##### Reading in data for weather


```{r}
url2 <- "weather_nyc_2021_2022.xlsx"
weather_df <- read_excel(url2)

colnames(weather_df) %>% kable()
```


##### Data wrangling weather data frame


```{r}
weather_df <-
  weather_df %>%
  select('datetime', 'tempmax', 'tempmin', 'temp', 'precip', 'snow', 
         'snowdepth', 'windspeed', 'conditions', 'icon')
colnames(weather_df) %>% kable()

```


##### Joining the weather data frame with both the bus and subway data frame


```{r}
sub_df <-
  sub_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
    mutate(Date = as.Date(Date))
head(sub_df)
```

```{r}
bus_df <-
  bus_df %>%
  # joining by the 'date' and 'datetime' variables
  full_join(weather_df, by = c("Date" = "datetime")) %>%
  mutate(Date = as.Date(Date))
head(bus_df)
```


## EDA


### Average Ridership by Day of Week


##### Subways


```{r}
avg_sub <-
  sub_df %>%
  group_by(`Day of Week`) %>%
  summarize("Avg Subway Ridership" = mean(`Subways: Total Estimated Ridership`)) %>%
  arrange(desc(`Avg Subway Ridership`))

```


##### Buses


```{r}
avg_bus <-
  bus_df %>%
  group_by(`Day of Week`) %>%
  summarize("Avg Bus Ridership" = mean(`Buses: Total Estimated Ridership`)) %>%
  arrange(desc(`Avg Bus Ridership`))

```

###### Joining both dataframes

```{r}
joint_avg <-
  avg_sub %>%
  full_join(avg_bus) %>%
  rename("Buses" = `Avg Bus Ridership`, "Subways" = `Avg Subway Ridership`) %>%
  pivot_longer(!`Day of Week`,
               names_to = "Category",
               values_to = "Average Ridership")

day_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", 
               "Saturday", "Sunday")
joint_avg$`Day of Week` <- factor(joint_avg$`Day of Week`, levels = day_order)

ggplot(joint_avg) +
  geom_bar(aes(x = `Average Ridership`, y = `Day of Week`,
               fill = `Day of Week`), stat = "identity") +
  ggtitle("Average Ridership by Day of the Week") +
  facet_wrap("Category")

```



### Total Ridership by Day of Week


##### Subways


```{r}
total_sub <-
  sub_df %>%
  group_by(`Day of Week`) %>%
  summarize("Total Subway Ridership" = sum(`Subways: Total Estimated Ridership`)) %>%
  arrange(desc(`Total Subway Ridership`))

```


##### Buses


```{r}
total_bus <-
  bus_df %>%
  group_by(`Day of Week`) %>%
  summarize("Total Bus Ridership" = sum(`Buses: Total Estimated Ridership`)) %>%
  arrange(desc(`Total Bus Ridership`))

```


###### Joining both dataframes


```{r}
joint_total <-
  total_sub %>%
  full_join(total_bus) %>%
  rename("Buses" = `Total Bus Ridership`, "Subways" = `Total Subway Ridership`) %>%
  pivot_longer(!`Day of Week`,
               names_to = "Category",
               values_to = "Total Ridership")

day_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", 
               "Saturday", "Sunday")
joint_total$`Day of Week` <- factor(joint_total$`Day of Week`, levels = day_order)


ggplot(joint_total) +
  geom_bar(aes(x = `Total Ridership`, y = `Day of Week`,
               fill = `Day of Week`), stat = "identity") +
  ggtitle("Total Ridership by Day of the Week") +
  facet_wrap("Category")
```

##### Data Wrangling

```{r}
# making all the NA values ' '
weather_df$conditions <- ifelse(is.na(weather_df$conditions), "", weather_df$conditions) 
weather_df$icon <- ifelse(is.na(weather_df$icon), "", weather_df$icon)

# getting rid of 2020 and 2023 dates as we don't want to include those
df <- df %>%
    filter(!grepl("2023$", Date),
         !grepl("2020$", Date))

# changing column names for simplicity
colnames(df) <- c('Date', 'Subway', 'Subway%', 'Buses', 'Buses%', 'LIRR', 'LIRR%', 'Metro-North', 'Metro-North%', 'AARide', 'AARide%', 'Bridges&Tunnels', 'Bridges&Tunnels%', 'SIRR', 'SIRR%')

# mutating format of date so it can be joined
weather_df <- weather_df %>% 
  mutate(datetime = ymd(datetime)) %>% 
  mutate(datetime = format(datetime, "%m/%d/%Y"))

# joining weather and transportation df
combined <- weather_df %>%
  full_join(df, by = c('datetime' = 'Date'))
```


```{r}
# creating table that has Subway ridership per day by icon
SubwayByIcon <- combined %>%
  select(icon, Subway, datetime) %>%
  group_by(icon) %>%
  summarize(RidershipPerIcon = sum(Subway)/n())
```


```{r}
# creating new table that has transportation type so now we can group by type
TransportByIcon <- combined %>%
  select(datetime, Subway, Buses, LIRR, 'Metro-North', AARide, 'Bridges&Tunnels', SIRR, icon) %>%
  pivot_longer(cols = c('Subway', 'Buses', 'LIRR', 'Metro-North', 'AARide', 'Bridges&Tunnels', 'SIRR'), names_to = 'TransportationType', values_to = 'DailyRidership') %>%
  group_by(icon,TransportationType) %>%
  na.omit() %>%
  summarize(Daily = sum(DailyRidership)/n())

```

### Bus and Subway Ridership by Weather Condition

```{r}
# just doing buses vs subways as they are the most popular so we can see diff better
TransportByIcon %>%
  filter(TransportationType == 'Buses'| TransportationType == 'Subway') %>%
  group_by(icon, TransportationType) %>%
  ggplot() +
  geom_bar(aes(x = TransportationType, y = Daily, fill = TransportationType), stat = 'identity') +
  facet_wrap(~icon) + 
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  ylab('Daily Ridership') +
  ggtitle('Bus & Subway Daily Ridership for each Weather Condition')
```

### Subway and Bus Daily Ridership Boxplot

```{r}
longTable <- combined %>%
  select(datetime, Subway, Buses, snowdepth, tempmax, tempmin, temp, precip, snow, windspeed, conditions, icon) %>%
  pivot_longer(cols = c('Subway', 'Buses'), names_to = 'TransportationType', values_to = 'DailyRidership')



# on a clear day, what transportation method is used most (not considering Subway)
longTable %>%
  select(DailyRidership, TransportationType, conditions) %>%
  filter(TransportationType %in% c('Buses', 'Subway')) %>%
  filter(conditions == 'Clear') %>%
  ggplot() +
  geom_boxplot(aes(x = DailyRidership, y = TransportationType)) +
  ggtitle("Subway vs. Bus Daily Ridership")
```

### Ridership for Subways and Buses over the Years

```{r}
ggplot() +
  geom_line(data = sub_df, aes(x = Date, y = `Subways: Total Estimated Ridership`, color = "Subway Ridership")) +
  geom_line(data = bus_df, aes(x = Date, y = `Buses: Total Estimated Ridership`, color = "Bus Ridership")) +
  scale_y_continuous(labels = scales::comma) +
  labs(title = "Daily Ridership for Subways and Buses",
       x = "Date",
       y = "Total Estimated Ridership",
       color = "Transportation") +
  theme_minimal()

```

### Ridership by Temperature and Day of the Week

```{r}
bus_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

day_order <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
bus_df$`Day of Week` <- factor(bus_df$`Day of Week`, levels = day_order)


sub_df$temperature <- cut(sub_df$temp, 
                          breaks = c(-Inf, 40, 55, 70, 80, Inf),
                          labels = c("Cold", "Cool", "Mild", "Warm", "Hot"))

sub_df$`Day of Week` <- factor(sub_df$`Day of Week`, levels = day_order)

#MAIN PLOTS

ggplot(bus_df, aes(x = `Day of Week`, y = `Buses: Total Estimated Ridership`, fill = temperature)) +
  geom_bar(position = "dodge", stat = "identity") +
  scale_fill_brewer(palette = "RdYlBu", direction = -1) +
  labs(x = "Day of the week", y = "Ridership", fill = "Temperature") +
  ggtitle("Bus Ridership by Temperature and Day of the Week") +
  theme_minimal(base_size = 10)


ggplot(sub_df, aes(x = `Day of Week`, y = `Subways: Total Estimated Ridership`, fill = temperature)) +
  geom_bar(position = "dodge", stat = "identity") +
  scale_fill_brewer(palette = "RdYlBu", direction = -1) +
  labs(x = "Day of the week", y = "Ridership", fill = "Temperature") +
  ggtitle("Subway Ridership by Temperature and Day of the Week") +
  theme_minimal(base_size = 10)
``` 

